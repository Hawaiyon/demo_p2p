// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Loan loan
// swagger:model Loan

type Loan struct {

	// borrower Id
	// Required: true
	BorrowerID *int64 `json:"BorrowerId"`

	// lender Id
	// Required: true
	LenderID *int64 `json:"LenderId"`

	// amount
	// Required: true
	Amount *int64 `json:"amount"`

	// created date
	// Read Only: true
	CreatedDate strfmt.DateTime `json:"createdDate,omitempty"`

	// id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// Transaction Status
	// Read Only: true
	Status string `json:"status,omitempty"`
}

/* polymorph Loan BorrowerId false */

/* polymorph Loan LenderId false */

/* polymorph Loan amount false */

/* polymorph Loan createdDate false */

/* polymorph Loan id false */

/* polymorph Loan status false */

// Validate validates this loan
func (m *Loan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBorrowerID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLenderID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAmount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Loan) validateBorrowerID(formats strfmt.Registry) error {

	if err := validate.Required("BorrowerId", "body", m.BorrowerID); err != nil {
		return err
	}

	return nil
}

func (m *Loan) validateLenderID(formats strfmt.Registry) error {

	if err := validate.Required("LenderId", "body", m.LenderID); err != nil {
		return err
	}

	return nil
}

func (m *Loan) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

var loanTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["failed","success"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		loanTypeStatusPropEnum = append(loanTypeStatusPropEnum, v)
	}
}

const (
	// LoanStatusFailed captures enum value "failed"
	LoanStatusFailed string = "failed"
	// LoanStatusSuccess captures enum value "success"
	LoanStatusSuccess string = "success"
)

// prop value enum
func (m *Loan) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, loanTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Loan) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Loan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Loan) UnmarshalBinary(b []byte) error {
	var res Loan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
