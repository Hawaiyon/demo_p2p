// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Debt debt
// swagger:model Debt

type Debt struct {

	// 基准用户 ID
	// Required: true
	BaseUserID *int64 `json:"baseUserId"`

	// borrow
	// Required: true
	// Read Only: true
	Borrow int64 `json:"borrow"`

	// lend
	// Required: true
	// Read Only: true
	Lend int64 `json:"lend"`

	// 另外一个用户的ID
	// Required: true
	ToUserID *int64 `json:"toUserId"`
}

/* polymorph Debt baseUserId false */

/* polymorph Debt borrow false */

/* polymorph Debt lend false */

/* polymorph Debt toUserId false */

// Validate validates this debt
func (m *Debt) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseUserID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateBorrow(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLend(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateToUserID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Debt) validateBaseUserID(formats strfmt.Registry) error {

	if err := validate.Required("baseUserId", "body", m.BaseUserID); err != nil {
		return err
	}

	return nil
}

func (m *Debt) validateBorrow(formats strfmt.Registry) error {

	if err := validate.Required("borrow", "body", int64(m.Borrow)); err != nil {
		return err
	}

	return nil
}

func (m *Debt) validateLend(formats strfmt.Registry) error {

	if err := validate.Required("lend", "body", int64(m.Lend)); err != nil {
		return err
	}

	return nil
}

func (m *Debt) validateToUserID(formats strfmt.Registry) error {

	if err := validate.Required("toUserId", "body", m.ToUserID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Debt) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Debt) UnmarshalBinary(b []byte) error {
	var res Debt
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
