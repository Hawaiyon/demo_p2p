// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Repayment repayment
// swagger:model Repayment

type Repayment struct {

	// borrower Id
	// Required: true
	BorrowerID *int64 `json:"BorrowerId"`

	// lender Id
	// Required: true
	LenderID *int64 `json:"LenderId"`

	// created date
	// Read Only: true
	CreatedDate strfmt.DateTime `json:"createdDate,omitempty"`

	// id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// repay amount
	// Required: true
	RepayAmount *int64 `json:"repay_amount"`

	// Transaction Status
	// Read Only: true
	Status string `json:"status,omitempty"`
}

/* polymorph Repayment BorrowerId false */

/* polymorph Repayment LenderId false */

/* polymorph Repayment createdDate false */

/* polymorph Repayment id false */

/* polymorph Repayment repay_amount false */

/* polymorph Repayment status false */

// Validate validates this repayment
func (m *Repayment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBorrowerID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLenderID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRepayAmount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Repayment) validateBorrowerID(formats strfmt.Registry) error {

	if err := validate.Required("BorrowerId", "body", m.BorrowerID); err != nil {
		return err
	}

	return nil
}

func (m *Repayment) validateLenderID(formats strfmt.Registry) error {

	if err := validate.Required("LenderId", "body", m.LenderID); err != nil {
		return err
	}

	return nil
}

func (m *Repayment) validateRepayAmount(formats strfmt.Registry) error {

	if err := validate.Required("repay_amount", "body", m.RepayAmount); err != nil {
		return err
	}

	return nil
}

var repaymentTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["failed","success"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		repaymentTypeStatusPropEnum = append(repaymentTypeStatusPropEnum, v)
	}
}

const (
	// RepaymentStatusFailed captures enum value "failed"
	RepaymentStatusFailed string = "failed"
	// RepaymentStatusSuccess captures enum value "success"
	RepaymentStatusSuccess string = "success"
)

// prop value enum
func (m *Repayment) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, repaymentTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Repayment) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Repayment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Repayment) UnmarshalBinary(b []byte) error {
	var res Repayment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
