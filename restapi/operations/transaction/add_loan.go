// Code generated by go-swagger; DO NOT EDIT.

package transaction

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// AddLoanHandlerFunc turns a function with the right signature into a add loan handler
type AddLoanHandlerFunc func(AddLoanParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddLoanHandlerFunc) Handle(params AddLoanParams) middleware.Responder {
	return fn(params)
}

// AddLoanHandler interface for that can handle valid add loan params
type AddLoanHandler interface {
	Handle(AddLoanParams) middleware.Responder
}

// NewAddLoan creates a new http.Handler for the add loan operation
func NewAddLoan(ctx *middleware.Context, handler AddLoanHandler) *AddLoan {
	return &AddLoan{Context: ctx, Handler: handler}
}

/*AddLoan swagger:route POST /loan transaction addLoan

借款

*/
type AddLoan struct {
	Context *middleware.Context
	Handler AddLoanHandler
}

func (o *AddLoan) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddLoanParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
